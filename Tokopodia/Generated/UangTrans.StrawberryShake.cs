// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class UangTransServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Tokopodia.State.UangTransStoreAccessor> AddUangTrans(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Tokopodia.State.UangTransStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.RegisterUserMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.LoginUserMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.UangTrans>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.IUangTrans>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Tokopodia.State.UangTransStoreAccessor>("UangTrans", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("UangTrans"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Tokopodia.RegisterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Tokopodia.LoginUserInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.IRegisterUserResult>, global::Tokopodia.State.RegisterUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.IRegisterUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.IRegisterUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.IRegisterUserResult>, global::Tokopodia.State.RegisterUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Tokopodia.IRegisterUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Tokopodia.IRegisterUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.IRegisterUserResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.RegisterUserMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.IRegisterUserMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.RegisterUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.ILoginUserResult>, global::Tokopodia.State.LoginUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.ILoginUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.ILoginUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.ILoginUserResult>, global::Tokopodia.State.LoginUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Tokopodia.ILoginUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Tokopodia.ILoginUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.ILoginUserResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.LoginUserMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.ILoginUserMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.LoginUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Tokopodia.State.UangTransEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.UangTrans>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Tokopodia.IUangTrans>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Tokopodia.UangTrans>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Tokopodia
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserResult : global::System.IEquatable<RegisterUserResult>, IRegisterUserResult
    {
        public RegisterUserResult(global::Tokopodia.IRegisterUser_RegisterUser? registerUser)
        {
            RegisterUser = registerUser;
        }

        public global::Tokopodia.IRegisterUser_RegisterUser? RegisterUser { get; }

        public virtual global::System.Boolean Equals(RegisterUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RegisterUser is null && other.RegisterUser is null) || RegisterUser != null && RegisterUser.Equals(other.RegisterUser)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RegisterUser != null)
                {
                    hash ^= 397 * RegisterUser.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUser_RegisterUser_ProfileResult : global::System.IEquatable<RegisterUser_RegisterUser_ProfileResult>, IRegisterUser_RegisterUser_ProfileResult
    {
        public RegisterUser_RegisterUser_ProfileResult(global::System.String? message, global::Tokopodia.IRegisterUser_RegisterUser_Data? data)
        {
            Message = message;
            Data = data;
        }

        public global::System.String? Message { get; }

        public global::Tokopodia.IRegisterUser_RegisterUser_Data? Data { get; }

        public virtual global::System.Boolean Equals(RegisterUser_RegisterUser_ProfileResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message))) && ((Data is null && other.Data is null) || Data != null && Data.Equals(other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterUser_RegisterUser_ProfileResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                if (Data != null)
                {
                    hash ^= 397 * Data.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUser_RegisterUser_Data_ProfileOutput : global::System.IEquatable<RegisterUser_RegisterUser_Data_ProfileOutput>, IRegisterUser_RegisterUser_Data_ProfileOutput
    {
        public RegisterUser_RegisterUser_Data_ProfileOutput(global::System.Int32 id, global::System.String? username, global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.DateTimeOffset createdDate)
        {
            Id = id;
            Username = username;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            CreatedDate = createdDate;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Username { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.DateTimeOffset CreatedDate { get; }

        public virtual global::System.Boolean Equals(RegisterUser_RegisterUser_Data_ProfileOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && CreatedDate.Equals(other.CreatedDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterUser_RegisterUser_Data_ProfileOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                hash ^= 397 * CreatedDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUserResult
    {
        public global::Tokopodia.IRegisterUser_RegisterUser? RegisterUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUser_RegisterUser
    {
        public global::System.String? Message { get; }

        public global::Tokopodia.IRegisterUser_RegisterUser_Data? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUser_RegisterUser_ProfileResult : IRegisterUser_RegisterUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUser_RegisterUser_Data
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Username { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.DateTimeOffset CreatedDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUser_RegisterUser_Data_ProfileOutput : IRegisterUser_RegisterUser_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserResult : global::System.IEquatable<LoginUserResult>, ILoginUserResult
    {
        public LoginUserResult(global::Tokopodia.ILoginUser_LoginUser? loginUser)
        {
            LoginUser = loginUser;
        }

        public global::Tokopodia.ILoginUser_LoginUser? LoginUser { get; }

        public virtual global::System.Boolean Equals(LoginUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LoginUser is null && other.LoginUser is null) || LoginUser != null && LoginUser.Equals(other.LoginUser)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (LoginUser != null)
                {
                    hash ^= 397 * LoginUser.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUser_LoginUser_UserToken : global::System.IEquatable<LoginUser_LoginUser_UserToken>, ILoginUser_LoginUser_UserToken
    {
        public LoginUser_LoginUser_UserToken(global::System.String? token, global::System.String? expired, global::System.String? message)
        {
            Token = token;
            Expired = expired;
            Message = message;
        }

        public global::System.String? Token { get; }

        public global::System.String? Expired { get; }

        public global::System.String? Message { get; }

        public virtual global::System.Boolean Equals(LoginUser_LoginUser_UserToken? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Token is null && other.Token is null) || Token != null && Token.Equals(other.Token))) && ((Expired is null && other.Expired is null) || Expired != null && Expired.Equals(other.Expired)) && ((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginUser_LoginUser_UserToken)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Token != null)
                {
                    hash ^= 397 * Token.GetHashCode();
                }

                if (Expired != null)
                {
                    hash ^= 397 * Expired.GetHashCode();
                }

                if (Message != null)
                {
                    hash ^= 397 * Message.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ILoginUserResult
    {
        public global::Tokopodia.ILoginUser_LoginUser? LoginUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ILoginUser_LoginUser
    {
        public global::System.String? Token { get; }

        public global::System.String? Expired { get; }

        public global::System.String? Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ILoginUser_LoginUser_UserToken : ILoginUser_LoginUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "RegisterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Tokopodia.RegisterInput;
            var inputInfo = runtimeValue as global::Tokopodia.State.IRegisterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsFirstNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("firstName", FormatFirstName(input.FirstName)));
            }

            if (inputInfo.IsLastNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastName", FormatLastName(input.LastName)));
            }

            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            if (inputInfo.IsUsernameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("username", FormatUsername(input.Username)));
            }

            if (inputInfo.IsPasswordSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("password", FormatPassword(input.Password)));
            }

            return fields;
        }

        private global::System.Object? FormatFirstName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUsername(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPassword(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterInput : global::Tokopodia.State.IRegisterInputInfo, global::System.IEquatable<RegisterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterInput)obj);
        }

        public virtual global::System.Boolean Equals(RegisterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((Password is null && other.Password is null) || Password != null && Password.Equals(other.Password));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (Password != null)
                {
                    hash ^= 397 * Password.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_firstName;
        private global::System.Boolean _set_firstName;
        private global::System.String? _value_lastName;
        private global::System.Boolean _set_lastName;
        private global::System.String? _value_email;
        private global::System.Boolean _set_email;
        private global::System.String? _value_username;
        private global::System.Boolean _set_username;
        private global::System.String? _value_password;
        private global::System.Boolean _set_password;
        public global::System.String? FirstName
        {
            get => _value_firstName;
            set
            {
                _set_firstName = true;
                _value_firstName = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.IRegisterInputInfo.IsFirstNameSet => _set_firstName;
        public global::System.String? LastName
        {
            get => _value_lastName;
            set
            {
                _set_lastName = true;
                _value_lastName = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.IRegisterInputInfo.IsLastNameSet => _set_lastName;
        public global::System.String? Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.IRegisterInputInfo.IsEmailSet => _set_email;
        public global::System.String? Username
        {
            get => _value_username;
            set
            {
                _set_username = true;
                _value_username = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.IRegisterInputInfo.IsUsernameSet => _set_username;
        public global::System.String? Password
        {
            get => _value_password;
            set
            {
                _set_password = true;
                _value_password = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.IRegisterInputInfo.IsPasswordSet => _set_password;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "LoginUserInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Tokopodia.LoginUserInput;
            var inputInfo = runtimeValue as global::Tokopodia.State.ILoginUserInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsUsernameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("username", FormatUsername(input.Username)));
            }

            if (inputInfo.IsPasswordSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("password", FormatPassword(input.Password)));
            }

            return fields;
        }

        private global::System.Object? FormatUsername(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPassword(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserInput : global::Tokopodia.State.ILoginUserInputInfo, global::System.IEquatable<LoginUserInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginUserInput)obj);
        }

        public virtual global::System.Boolean Equals(LoginUserInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username))) && ((Password is null && other.Password is null) || Password != null && Password.Equals(other.Password));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (Password != null)
                {
                    hash ^= 397 * Password.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_username;
        private global::System.Boolean _set_username;
        private global::System.String? _value_password;
        private global::System.Boolean _set_password;
        public global::System.String? Username
        {
            get => _value_username;
            set
            {
                _set_username = true;
                _value_username = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.ILoginUserInputInfo.IsUsernameSet => _set_username;
        public global::System.String? Password
        {
            get => _value_password;
            set
            {
                _set_password = true;
                _value_password = value;
            }
        }

        global::System.Boolean global::Tokopodia.State.ILoginUserInputInfo.IsPasswordSet => _set_password;
    }

    /// <summary>
    /// Represents the operation service of the RegisterUser GraphQL operation
    /// <code>
    /// mutation RegisterUser($input: RegisterInput) {
    ///   registerUser(input: $input) {
    ///     __typename
    ///     message
    ///     data {
    ///       __typename
    ///       id
    ///       username
    ///       firstName
    ///       lastName
    ///       email
    ///       createdDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserMutationDocument : global::StrawberryShake.IDocument
    {
        private RegisterUserMutationDocument()
        {
        }

        public static RegisterUserMutationDocument Instance { get; } = new RegisterUserMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2e007813bb48655ad01c532ba131b0b6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterUser GraphQL operation
    /// <code>
    /// mutation RegisterUser($input: RegisterInput) {
    ///   registerUser(input: $input) {
    ///     __typename
    ///     message
    ///     data {
    ///       __typename
    ///       id
    ///       username
    ///       firstName
    ///       lastName
    ///       email
    ///       createdDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserMutation : global::Tokopodia.IRegisterUserMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRegisterUserResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _registerInputFormatter;
        public RegisterUserMutation(global::StrawberryShake.IOperationExecutor<IRegisterUserResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _registerInputFormatter = serializerResolver.GetInputValueFormatter("RegisterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRegisterUserResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterUserResult>> ExecuteAsync(global::Tokopodia.RegisterInput? input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterUserResult>> Watch(global::Tokopodia.RegisterInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Tokopodia.RegisterInput? input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RegisterUserMutationDocument.Instance.Hash.Value, name: "RegisterUser", document: RegisterUserMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Tokopodia.RegisterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _registerInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterUser GraphQL operation
    /// <code>
    /// mutation RegisterUser($input: RegisterInput) {
    ///   registerUser(input: $input) {
    ///     __typename
    ///     message
    ///     data {
    ///       __typename
    ///       id
    ///       username
    ///       firstName
    ///       lastName
    ///       email
    ///       createdDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRegisterUserMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterUserResult>> ExecuteAsync(global::Tokopodia.RegisterInput? input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterUserResult>> Watch(global::Tokopodia.RegisterInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the LoginUser GraphQL operation
    /// <code>
    /// mutation LoginUser($input: LoginUserInput) {
    ///   loginUser(input: $input) {
    ///     __typename
    ///     token
    ///     expired
    ///     message
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserMutationDocument : global::StrawberryShake.IDocument
    {
        private LoginUserMutationDocument()
        {
        }

        public static LoginUserMutationDocument Instance { get; } = new LoginUserMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d5e5efecf2f3b5d8caf037173c4f95bc");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the LoginUser GraphQL operation
    /// <code>
    /// mutation LoginUser($input: LoginUserInput) {
    ///   loginUser(input: $input) {
    ///     __typename
    ///     token
    ///     expired
    ///     message
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserMutation : global::Tokopodia.ILoginUserMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ILoginUserResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _loginUserInputFormatter;
        public LoginUserMutation(global::StrawberryShake.IOperationExecutor<ILoginUserResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _loginUserInputFormatter = serializerResolver.GetInputValueFormatter("LoginUserInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ILoginUserResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginUserResult>> ExecuteAsync(global::Tokopodia.LoginUserInput? input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginUserResult>> Watch(global::Tokopodia.LoginUserInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Tokopodia.LoginUserInput? input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: LoginUserMutationDocument.Instance.Hash.Value, name: "LoginUser", document: LoginUserMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Tokopodia.LoginUserInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _loginUserInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the LoginUser GraphQL operation
    /// <code>
    /// mutation LoginUser($input: LoginUserInput) {
    ///   loginUser(input: $input) {
    ///     __typename
    ///     token
    ///     expired
    ///     message
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ILoginUserMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginUserResult>> ExecuteAsync(global::Tokopodia.LoginUserInput? input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginUserResult>> Watch(global::Tokopodia.LoginUserInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the UangTrans GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UangTrans : global::Tokopodia.IUangTrans
    {
        private readonly global::Tokopodia.IRegisterUserMutation _registerUser;
        private readonly global::Tokopodia.ILoginUserMutation _loginUser;
        public UangTrans(global::Tokopodia.IRegisterUserMutation registerUser, global::Tokopodia.ILoginUserMutation loginUser)
        {
            _registerUser = registerUser ?? throw new global::System.ArgumentNullException(nameof(registerUser));
            _loginUser = loginUser ?? throw new global::System.ArgumentNullException(nameof(loginUser));
        }

        public static global::System.String ClientName => "UangTrans";
        public global::Tokopodia.IRegisterUserMutation RegisterUser => _registerUser;
        public global::Tokopodia.ILoginUserMutation LoginUser => _loginUser;
    }

    /// <summary>
    /// Represents the UangTrans GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUangTrans
    {
        global::Tokopodia.IRegisterUserMutation RegisterUser { get; }

        global::Tokopodia.ILoginUserMutation LoginUser { get; }
    }
}

namespace Tokopodia.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.RegisterUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RegisterUserResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Tokopodia.IRegisterUserResult);
        public RegisterUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RegisterUserResultInfo info)
            {
                return new RegisterUserResult(MapIRegisterUser_RegisterUser(info.RegisterUser, snapshot));
            }

            throw new global::System.ArgumentException("RegisterUserResultInfo expected.");
        }

        private global::Tokopodia.IRegisterUser_RegisterUser? MapIRegisterUser_RegisterUser(global::Tokopodia.State.ProfileResultData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRegisterUser_RegisterUser returnValue = default !;
            if (data?.__typename.Equals("ProfileResult", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RegisterUser_RegisterUser_ProfileResult(data.Message, MapIRegisterUser_RegisterUser_Data(data.Data, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Tokopodia.IRegisterUser_RegisterUser_Data? MapIRegisterUser_RegisterUser_Data(global::Tokopodia.State.ProfileOutputData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRegisterUser_RegisterUser_Data returnValue = default !;
            if (data?.__typename.Equals("ProfileOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RegisterUser_RegisterUser_Data_ProfileOutput(data.Id ?? throw new global::System.ArgumentNullException(), data.Username, data.FirstName, data.LastName, data.Email, data.CreatedDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RegisterUserResultInfo(global::Tokopodia.State.ProfileResultData? registerUser, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RegisterUser = registerUser;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Tokopodia.State.ProfileResultData? RegisterUser { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RegisterUserResultInfo(RegisterUser, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.LoginUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public LoginUserResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Tokopodia.ILoginUserResult);
        public LoginUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is LoginUserResultInfo info)
            {
                return new LoginUserResult(MapILoginUser_LoginUser(info.LoginUser, snapshot));
            }

            throw new global::System.ArgumentException("LoginUserResultInfo expected.");
        }

        private global::Tokopodia.ILoginUser_LoginUser? MapILoginUser_LoginUser(global::Tokopodia.State.UserTokenData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ILoginUser_LoginUser returnValue = default !;
            if (data?.__typename.Equals("UserToken", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new LoginUser_LoginUser_UserToken(data.Token, data.Expired, data.Message);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public LoginUserResultInfo(global::Tokopodia.State.UserTokenData? loginUser, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            LoginUser = loginUser;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Tokopodia.State.UserTokenData? LoginUser { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new LoginUserResultInfo(LoginUser, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    internal interface IRegisterInputInfo
    {
        global::System.Boolean IsFirstNameSet { get; }

        global::System.Boolean IsLastNameSet { get; }

        global::System.Boolean IsEmailSet { get; }

        global::System.Boolean IsUsernameSet { get; }

        global::System.Boolean IsPasswordSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    internal interface ILoginUserInputInfo
    {
        global::System.Boolean IsUsernameSet { get; }

        global::System.Boolean IsPasswordSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RegisterUserBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.IRegisterUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.IRegisterUserResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public RegisterUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.IRegisterUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IRegisterUserResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRegisterUserResult Result, RegisterUserResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRegisterUserResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRegisterUserResult, RegisterUserResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RegisterUserResultInfo(DeserializeIRegisterUser_RegisterUser(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registerUser")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Tokopodia.State.ProfileResultData? DeserializeIRegisterUser_RegisterUser(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProfileResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Tokopodia.State.ProfileResultData(typename, message: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")), data: DeserializeIRegisterUser_RegisterUser_Data(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Tokopodia.State.ProfileOutputData? DeserializeIRegisterUser_RegisterUser_Data(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProfileOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Tokopodia.State.ProfileOutputData(typename, id: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), email: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), createdDate: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdDate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LoginUserBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Tokopodia.ILoginUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.ILoginUserResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public LoginUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Tokopodia.ILoginUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ILoginUserResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ILoginUserResult Result, LoginUserResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ILoginUserResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ILoginUserResult, LoginUserResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new LoginUserResultInfo(DeserializeILoginUser_LoginUser(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loginUser")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Tokopodia.State.UserTokenData? DeserializeILoginUser_LoginUser(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserToken", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Tokopodia.State.UserTokenData(typename, token: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "token")), expired: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "expired")), message: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProfileResultData
    {
        public ProfileResultData(global::System.String __typename, global::System.String? message = default !, global::Tokopodia.State.ProfileOutputData? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Message = message;
            Data = data;
        }

        public global::System.String __typename { get; }

        public global::System.String? Message { get; }

        public global::Tokopodia.State.ProfileOutputData? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProfileOutputData
    {
        public ProfileOutputData(global::System.String __typename, global::System.Int32? id = default !, global::System.String? username = default !, global::System.String? firstName = default !, global::System.String? lastName = default !, global::System.String? email = default !, global::System.DateTimeOffset? createdDate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Username = username;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            CreatedDate = createdDate;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Id { get; }

        public global::System.String? Username { get; }

        public global::System.String? FirstName { get; }

        public global::System.String? LastName { get; }

        public global::System.String? Email { get; }

        public global::System.DateTimeOffset? CreatedDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UserTokenData
    {
        public UserTokenData(global::System.String __typename, global::System.String? token = default !, global::System.String? expired = default !, global::System.String? message = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Token = token;
            Expired = expired;
            Message = message;
        }

        public global::System.String __typename { get; }

        public global::System.String? Token { get; }

        public global::System.String? Expired { get; }

        public global::System.String? Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UangTransEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UangTransStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public UangTransStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
