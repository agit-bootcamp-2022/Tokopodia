"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type Query {
  customersAsync: [Customer]
  transactionsAsync: [Transaction]
  walletsAsync: [Wallet]
  geRolesAsync: [Roles]
  walletMutationAsync: [WalletMutation]
  walletByCustomerIdAsync: [WalletOutput]
  profileByCustomerIdAsync: [ProfileOutput]
  walletMutationIdAsync: [TableJoinResult]
}

type Mutation {
  registerUser(input: RegisterInput): ProfileResult
  registerAdmin(input: RegisterInput): ProfileResult
  addToRole(input: AddRoleToUserInput): AddRoleToUser
  loginUser(input: LoginUserInput): UserToken
  createRole(input: CreateRoleInput): TransactionStatus
  createTransaction(input: TransactionCreateInput): TransactionCreateOutput
  createWalletMutationDebitCredit(
    input: WalletMutationCreateInput
  ): TransactionStatus
  topUp(input: WalletInput): WalletBalance
  transferBalance(input: TransferBalanceInput): TransactionStatus
  updateProfile(input: ProfileInput): ProfileResult
  updateWallet(input: WalletInput): WalletBalance
  lockUser(input: LockUserInput): TransactionStatus
  unlockUser(input: LockUserInput): TransactionStatus
  updateStatusTransaction(input: TransactionUpdateInput): TransactionStatus
}

type Transaction {
  id: Int!
  buyerId: Int!
  amountBuyer: Float!
  courierId: Int!
  amountCourier: Float!
  transactionStatus: Status!
  sellers: [Seller]
}

type Customer {
  id: Int!
  username: String
  firstName: String
  lastName: String
  email: String
  createdDate: DateTime!
  wallet: Wallet
}

type Wallet {
  id: Int!
  balance: Float!
  createdDate: DateTime!
  walletMutations: [WalletMutation]
  customerId: Int!
  customer: Customer
}

type Roles {
  rolename: String
}

type WalletMutation {
  id: Int!
  walletId: Int!
  amount: Float!
  mutationType: MutationType!
  createdDate: DateTime!
  wallet: Wallet
}

type WalletOutput {
  id: Int!
  balance: Float!
  createdDate: DateTime!
  customerId: Int!
}

type ProfileOutput {
  id: Int!
  username: String
  firstName: String
  lastName: String
  email: String
  createdDate: DateTime!
}

type TableJoinResult {
  walletMutation: WalletMutation
  wallet: Wallet
}

type ProfileResult {
  message: String
  data: ProfileOutput
}

input RegisterInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
}

type AddRoleToUser {
  username: String
  rolename: String
}

input AddRoleToUserInput {
  username: String
  rolename: String
}

type UserToken {
  token: String
  expired: String
  message: String
}

input LoginUserInput {
  username: String
  password: String
}

type TransactionStatus {
  succeed: Boolean!
  message: String
}

input CreateRoleInput {
  roleName: String
}

type TransactionCreateOutput {
  message: String
  transactionId: Int!
}

input TransactionCreateInput {
  buyerId: Int!
  amountBuyer: Float!
  amountCourier: Float!
  sellers: [SellerCreateInput]!
}

input WalletMutationCreateInput {
  customerId: Int!
  amount: Float!
  mutationType: MutationType!
}

type WalletBalance {
  message: String
  balance: Float!
}

input WalletInput {
  balance: Float!
}

input TransferBalanceInput {
  amount: Float!
  customerDebitId: Int!
  customerCreditId: Int!
}

input ProfileInput {
  firstName: String
  lastName: String
  email: String
}

input LockUserInput {
  username: String
}

input TransactionUpdateInput {
  transactionId: Int!
  transactionStatus: Statuss!
}

enum Statuss {
  PAID
  DELIVERED
}

enum MutationType {
  DEBIT
  CREDIT
}

input SellerCreateInput {
  sellerId: Int!
  amountSeller: Float!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type Seller {
  id: Int!
  sellerId: Int!
  transactionId: Int!
  amountSeller: Float!
  transaction: Transaction
}

enum Status {
  PAID
  DELIVERED
}
